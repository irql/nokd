
#pragma once

// ty good share pdb ^^
/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'ntoskrnl.exe'
*/

#define ALIGN( x ) __declspec( align( x ) )
#define ALIGN_PTR( x ) 

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

#pragma pack( push, 4 )

/* 1400 */
typedef struct ALIGN( 8 ) _DBGKD_LOAD_SYMBOLS64
{
    unsigned int PathNameLength;
    unsigned __int64 BaseOfDll;
    unsigned __int64 ProcessId;
    unsigned int CheckSum;
    unsigned int SizeOfImage;
    unsigned __int8 UnloadSymbols;
} ALIGN( 8 ) DBGKD_LOAD_SYMBOLS64, *PDBGKD_LOAD_SYMBOLS64;

/* 1401 */
typedef struct ALIGN( 4 ) _DBGKD_LOAD_SYMBOLS32
{
    unsigned int PathNameLength;
    unsigned int BaseOfDll;
    unsigned int ProcessId;
    unsigned int CheckSum;
    unsigned int SizeOfImage;
    unsigned __int8 UnloadSymbols;
} ALIGN( 4 ) DBGKD_LOAD_SYMBOLS32, *ALIGN_PTR( 4 ) PDBGKD_LOAD_SYMBOLS32;

/* 1402 */
typedef struct _DBGKD_READ_MEMORY64
{
    unsigned __int64 TargetBaseAddress;
    unsigned int TransferCount;
    unsigned int ActualBytesRead;
} DBGKD_READ_MEMORY64, *PDBGKD_READ_MEMORY64;

/* 1403 */
typedef struct _DBGKD_READ_MEMORY32
{
    unsigned int TargetBaseAddress;
    unsigned int TransferCount;
    unsigned int ActualBytesRead;
} DBGKD_READ_MEMORY32, *PDBGKD_READ_MEMORY32;

/* 1404 */
typedef struct _DBGKD_WRITE_MEMORY64
{
    unsigned __int64 TargetBaseAddress;
    unsigned int TransferCount;
    unsigned int ActualBytesWritten;
} DBGKD_WRITE_MEMORY64, *PDBGKD_WRITE_MEMORY64;

/* 1405 */
typedef struct _DBGKD_WRITE_MEMORY32
{
    unsigned int TargetBaseAddress;
    unsigned int TransferCount;
    unsigned int ActualBytesWritten;
} DBGKD_WRITE_MEMORY32, *PDBGKD_WRITE_MEMORY32;

/* 1406 */
typedef struct ALIGN( 8 ) _DBGKD_WRITE_BREAKPOINT64
{
    unsigned __int64 BreakPointAddress;
    unsigned int BreakPointHandle;
} ALIGN( 8 ) DBGKD_WRITE_BREAKPOINT64, *ALIGN_PTR( 8 ) PDBGKD_WRITE_BREAKPOINT64;

/* 1407 */
typedef struct _DBGKD_WRITE_BREAKPOINT32
{
    unsigned int BreakPointAddress;
    unsigned int BreakPointHandle;
} DBGKD_WRITE_BREAKPOINT32, *PDBGKD_WRITE_BREAKPOINT32;

/* 1408 */
typedef struct _DBGKD_READ_WRITE_IO64
{
    unsigned __int64 IoAddress;
    unsigned int DataSize;
    unsigned int DataValue;
} DBGKD_READ_WRITE_IO64, *PDBGKD_READ_WRITE_IO64;

/* 1409 */
typedef struct _DBGKD_READ_WRITE_IO32
{
    unsigned int DataSize;
    unsigned int IoAddress;
    unsigned int DataValue;
} DBGKD_READ_WRITE_IO32, *PDBGKD_READ_WRITE_IO32;

/* 1410 */
typedef struct ALIGN( 8 ) _DBGKD_READ_WRITE_IO_EXTENDED64
{
    unsigned int DataSize;
    unsigned int InterfaceType;
    unsigned int BusNumber;
    unsigned int AddressSpace;
    unsigned __int64 IoAddress;
    unsigned int DataValue;
} ALIGN( 8 ) DBGKD_READ_WRITE_IO_EXTENDED64, *ALIGN_PTR( 8 ) PDBGKD_READ_WRITE_IO_EXTENDED64;

/* 1411 */
typedef struct _DBGKD_READ_WRITE_IO_EXTENDED32
{
    unsigned int DataSize;
    unsigned int InterfaceType;
    unsigned int BusNumber;
    unsigned int AddressSpace;
    unsigned int IoAddress;
    unsigned int DataValue;
} DBGKD_READ_WRITE_IO_EXTENDED32, *PDBGKD_READ_WRITE_IO_EXTENDED32;

/* 1412 */
typedef struct _DBGKD_SET_SPECIAL_CALL32
{
    unsigned int SpecialCall;
} DBGKD_SET_SPECIAL_CALL32, *PDBGKD_SET_SPECIAL_CALL32;

/* 1413 */
typedef struct _DBGKD_SET_SPECIAL_CALL64
{
    unsigned __int64 SpecialCall;
} DBGKD_SET_SPECIAL_CALL64, *PDBGKD_SET_SPECIAL_CALL64;

/* 1414 */
typedef struct _DBGKD_SET_INTERNAL_BREAKPOINT32
{
    unsigned int BreakpointAddress;
    unsigned int Flags;
} DBGKD_SET_INTERNAL_BREAKPOINT32, *PDBGKD_SET_INTERNAL_BREAKPOINT32;

/* 1415 */
typedef struct __declspec( align( 8 ) ) _DBGKD_SET_INTERNAL_BREAKPOINT64
{
    unsigned __int64 BreakpointAddress;
    unsigned int Flags;
} DBGKD_SET_INTERNAL_BREAKPOINT64, *PDBGKD_SET_INTERNAL_BREAKPOINT64;

/* 1416 */
typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT64
{
    unsigned __int64 BreakpointAddress;
    unsigned int Flags;
    unsigned int Calls;
    unsigned int MaxCallsPerPeriod;
    unsigned int MinInstructions;
    unsigned int MaxInstructions;
    unsigned int TotalInstructions;
} DBGKD_GET_INTERNAL_BREAKPOINT64, *PDBGKD_GET_INTERNAL_BREAKPOINT64;

/* 1417 */
typedef struct _DBGKD_GET_INTERNAL_BREAKPOINT32
{
    unsigned int BreakpointAddress;
    unsigned int Flags;
    unsigned int Calls;
    unsigned int MaxCallsPerPeriod;
    unsigned int MinInstructions;
    unsigned int MaxInstructions;
    unsigned int TotalInstructions;
} DBGKD_GET_INTERNAL_BREAKPOINT32, *PDBGKD_GET_INTERNAL_BREAKPOINT32;

/* 1418 */
typedef struct _DBGKD_GET_CONTEXT
{
    unsigned int Unused;
} DBGKD_GET_CONTEXT, *PDBGKD_GET_CONTEXT;

/* 1419 */
typedef struct _DBGKD_SET_CONTEXT
{
    unsigned int ContextFlags;
} DBGKD_SET_CONTEXT, *PDBGKD_SET_CONTEXT;

/* 1420 */
typedef struct _DBGKD_RESTORE_BREAKPOINT
{
    unsigned int BreakPointHandle;
} DBGKD_RESTORE_BREAKPOINT, *PDBGKD_RESTORE_BREAKPOINT;

/* 1421 */
typedef struct _DBGKD_CONTINUE
{
    int ContinueStatus;
} DBGKD_CONTINUE, *PDBGKD_CONTINUE;

/* 1422 */
typedef struct __declspec( align( 4 ) ) _AMD64_DBGKD_CONTROL_SET
{
    unsigned int TraceFlag;
    unsigned __int64 Dr7;
    unsigned __int64 CurrentSymbolStart;
    unsigned __int64 CurrentSymbolEnd;
} AMD64_DBGKD_CONTROL_SET, *PAMD64_DBGKD_CONTROL_SET;

/* 1423 */
typedef struct _X86_DBGKD_CONTROL_SET
{
    unsigned int TraceFlag;
    unsigned int Dr7;
    unsigned int CurrentSymbolStart;
    unsigned int CurrentSymbolEnd;
} X86_DBGKD_CONTROL_SET, *PX86_DBGKD_CONTROL_SET;

/* 1424 */
typedef struct ALIGN( 4 ) _IA64_DBGKD_CONTROL_SET
{
    unsigned int Continue;
    unsigned __int64 CurrentSymbolStart;
    unsigned __int64 CurrentSymbolEnd;
} ALIGN( 4 ) IA64_DBGKD_CONTROL_SET, *ALIGN_PTR( 4 ) PIA64_DBGKD_CONTROL_SET;

/* 1425 */
typedef struct _ARM_DBGKD_CONTROL_SET
{
    unsigned int Continue;
    unsigned int CurrentSymbolStart;
    unsigned int CurrentSymbolEnd;
} ARM_DBGKD_CONTROL_SET, *PARM_DBGKD_CONTROL_SET;

/* 1426 */
typedef struct _ARM64_DBGKD_CONTROL_SET
{
    unsigned int Continue;
    unsigned int TraceFlag;
    unsigned __int64 CurrentSymbolStart;
    unsigned __int64 CurrentSymbolEnd;
} ARM64_DBGKD_CONTROL_SET, *PARM64_DBGKD_CONTROL_SET;

/* 1427 */
typedef struct _ARMCE_DBGKD_CONTROL_SET
{
    unsigned int Continue;
    unsigned int CurrentSymbolStart;
    unsigned int CurrentSymbolEnd;
} ARMCE_DBGKD_CONTROL_SET, *PARMCE_DBGKD_CONTROL_SET;

/* 1428 */
typedef struct _PPC_DBGKD_CONTROL_SET
{
    unsigned int Continue;
    unsigned int CurrentSymbolStart;
    unsigned int CurrentSymbolEnd;
} PPC_DBGKD_CONTROL_SET, *PPPC_DBGKD_CONTROL_SET;

/* 1430 */
typedef struct _DBGKD_ANY_CONTROL_SET
{
    union ALIGN( 4 )
    {
        X86_DBGKD_CONTROL_SET X86ControlSet;
        unsigned int AlphaControlSet;
        IA64_DBGKD_CONTROL_SET IA64ControlSet;
        AMD64_DBGKD_CONTROL_SET Amd64ControlSet;
        ARM_DBGKD_CONTROL_SET ArmControlSet;
        ARM64_DBGKD_CONTROL_SET Arm64ControlSet;
        ARMCE_DBGKD_CONTROL_SET ArmCeControlSet;
        PPC_DBGKD_CONTROL_SET PpcControlSet;
    };
} DBGKD_ANY_CONTROL_SET, *PDBGKD_ANY_CONTROL_SET;

/* 1432 */
typedef struct _DBGKD_CONTINUE2
{
    int ContinueStatus;
    union
    {
        AMD64_DBGKD_CONTROL_SET ControlSet;
        DBGKD_ANY_CONTROL_SET AnyControlSet;
    };
} DBGKD_CONTINUE2, *PDBGKD_CONTINUE2;

/* 1433 */
typedef struct _DBGKD_QUERY_SPECIAL_CALLS
{
    unsigned int NumberOfSpecialCalls;
} DBGKD_QUERY_SPECIAL_CALLS, *PDBGKD_QUERY_SPECIAL_CALLS;

#if 0 // winh
/* 1434 */
typedef struct _DBGKD_GET_VERSION64
{
    unsigned __int16 MajorVersion;
    unsigned __int16 MinorVersion;
    unsigned __int8 ProtocolVersion;
    unsigned __int8 KdSecondaryVersion;
    unsigned __int16 Flags;
    unsigned __int16 MachineType;
    unsigned __int8 MaxPacketType;
    unsigned __int8 MaxStateChange;
    unsigned __int8 MaxManipulate;
    unsigned __int8 Simulation;
    unsigned __int16 Unused[ 1 ];
    unsigned __int64 KernBase;
    unsigned __int64 PsLoadedModuleList;
    unsigned __int64 DebuggerDataList;
} DBGKD_GET_VERSION64, *PDBGKD_GET_VERSION64;

#else
typedef struct _DBGKD_GET_VERSION64 {
    USHORT  MajorVersion;
    USHORT  MinorVersion;
    UCHAR   ProtocolVersion;
    UCHAR   KdSecondaryVersion; // Cannot be 'A' for compat with dump header
    USHORT  Flags;
    USHORT  MachineType;

    //
    // Protocol command support descriptions.
    // These allow the debugger to automatically
    // adapt to different levels of command support
    // in different kernels.
    //

    // One beyond highest packet type understood, zero based.
    UCHAR   MaxPacketType;
    // One beyond highest state change understood, zero based.
    UCHAR   MaxStateChange;
    // One beyond highest state manipulate message understood, zero based.
    UCHAR   MaxManipulate;

    // Kind of execution environment the kernel is running in,
    // such as a real machine or a simulator.  Written back
    // by the simulation if one exists.
    UCHAR   Simulation;

    USHORT  Unused[ 1 ];

    ULONG64 KernBase;
    ULONG64 PsLoadedModuleList;

    //
    // Components may register a debug data block for use by
    // debugger extensions.  This is the address of the list head.
    //
    // There will always be an entry for the debugger.
    //

    ULONG64 DebuggerDataList;

} DBGKD_GET_VERSION64, *PDBGKD_GET_VERSION64;
#endif

/* 1435 */
typedef struct _DBGKD_BREAKPOINTEX
{
    unsigned int BreakPointCount;
    int ContinueStatus;
} DBGKD_BREAKPOINTEX, *PDBGKD_BREAKPOINTEX;

/* 1436 */
typedef struct _DBGKD_READ_WRITE_MSR
{
    unsigned int Msr;
    unsigned int DataValueLow;
    unsigned int DataValueHigh;
} DBGKD_READ_WRITE_MSR, *PDBGKD_READ_WRITE_MSR;


/* 1438 */
typedef struct ALIGN( 8 ) _DBGKD_SEARCH_MEMORY
{
    union
    {
        unsigned __int64 SearchAddress;
        unsigned __int64 FoundAddress;
    };
    unsigned __int64 SearchLength;
    unsigned int PatternLength;
} ALIGN( 8 ) DBGKD_SEARCH_MEMORY, *ALIGN_PTR( 8 ) PDBGKD_SEARCH_MEMORY;

/* 1439 */
typedef struct _DBGKD_GET_SET_BUS_DATA
{
    unsigned int BusDataType;
    unsigned int BusNumber;
    unsigned int SlotNumber;
    unsigned int Offset;
    unsigned int Length;
} DBGKD_GET_SET_BUS_DATA, *PDBGKD_GET_SET_BUS_DATA;

/* 1440 */
typedef struct _DBGKD_FILL_MEMORY
{
    unsigned __int64 Address;
    unsigned int Length;
    unsigned __int16 Flags;
    unsigned __int16 PatternLength;
} DBGKD_FILL_MEMORY, *PDBGKD_FILL_MEMORY;

/* 1441 */
typedef struct _DBGKD_QUERY_MEMORY
{
    unsigned __int64 Address;
    unsigned __int64 Reserved;
    unsigned int AddressSpace;
    unsigned int Flags;
} DBGKD_QUERY_MEMORY, *PDBGKD_QUERY_MEMORY;

/* 1442 */
typedef struct _DBGKD_SWITCH_PARTITION
{
    unsigned int Partition;
} DBGKD_SWITCH_PARTITION, *PDBGKD_SWITCH_PARTITION;

/* 1443 */
typedef struct _DBGKD_CONTEXT_EX
{
    unsigned int Offset;
    unsigned int ByteCount;
    unsigned int BytesCopied;
} DBGKD_CONTEXT_EX, *PDBGKD_CONTEXT_EX;

/* 1444 */
typedef struct ALIGN( 4 ) _DBGKD_WRITE_CUSTOM_BREAKPOINT
{
    unsigned __int64 BreakPointAddress;
    unsigned __int64 BreakPointInstruction;
    unsigned int BreakPointHandle;
    unsigned __int8 BreakPointInstructionSize;
    unsigned __int8 BreakPointInstructionAlignment;
} ALIGN( 4 ) DBGKD_WRITE_CUSTOM_BREAKPOINT, *ALIGN_PTR( 4 ) PDBGKD_WRITE_CUSTOM_BREAKPOINT;

/* 1445 */
typedef struct ALIGN( 8 ) _DBGKD_MANIPULATE_STATE64
{
    unsigned int ApiNumber;
    unsigned __int16 ProcessorLevel;
    unsigned __int16 Processor;
    int ReturnStatus;
    union
    {
        DBGKD_READ_MEMORY64 ReadMemory;
        DBGKD_WRITE_MEMORY64 WriteMemory;
        DBGKD_GET_CONTEXT GetContext;
        DBGKD_SET_CONTEXT SetContext;
        DBGKD_WRITE_BREAKPOINT64 WriteBreakPoint;
        DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;
        DBGKD_CONTINUE Continue;
        DBGKD_CONTINUE2 Continue2;
        DBGKD_READ_WRITE_IO64 ReadWriteIo;
        DBGKD_READ_WRITE_IO_EXTENDED64 ReadWriteIoExtended;
        DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;
        DBGKD_SET_SPECIAL_CALL64 SetSpecialCall;
        DBGKD_SET_INTERNAL_BREAKPOINT64 SetInternalBreakpoint;
        DBGKD_GET_INTERNAL_BREAKPOINT64 GetInternalBreakpoint;
        DBGKD_GET_VERSION64 GetVersion64;
        DBGKD_BREAKPOINTEX BreakPointEx;
        DBGKD_READ_WRITE_MSR ReadWriteMsr;
        DBGKD_SEARCH_MEMORY SearchMemory;
        DBGKD_GET_SET_BUS_DATA GetSetBusData;
        DBGKD_FILL_MEMORY FillMemory;
        DBGKD_QUERY_MEMORY QueryMemory;
        DBGKD_SWITCH_PARTITION SwitchPartition;
        DBGKD_CONTEXT_EX GetContextEx;
        DBGKD_CONTEXT_EX SetContextEx;
        DBGKD_WRITE_CUSTOM_BREAKPOINT WriteCustomBreakPoint;
    } u;
} ALIGN( 8 ) DBGKD_MANIPULATE_STATE64, *ALIGN_PTR( 8 ) PDBGKD_MANIPULATE_STATE64;

C_ASSERT( sizeof( DBGKD_MANIPULATE_STATE64 ) == 0x38 );

/* 1446 */
typedef struct _DBGKD_GET_VERSION32
{
    unsigned __int16 MajorVersion;
    unsigned __int16 MinorVersion;
    unsigned __int16 ProtocolVersion;
    unsigned __int16 Flags;
    unsigned int KernBase;
    unsigned int PsLoadedModuleList;
    unsigned __int16 MachineType;
    unsigned __int16 ThCallbackStack;
    unsigned __int16 NextCallback;
    unsigned __int16 FramePointer;
    unsigned int KiCallUserMode;
    unsigned int KeUserCallbackDispatcher;
    unsigned int BreakpointWithStatus;
    unsigned int DebuggerDataList;
} DBGKD_GET_VERSION32, *PDBGKD_GET_VERSION32;

/* 1447 */
typedef struct _DBGKD_MANIPULATE_STATE32
{
    unsigned int ApiNumber;
    unsigned __int16 ProcessorLevel;
    unsigned __int16 Processor;
    int ReturnStatus;
    union
    {
        DBGKD_READ_MEMORY32 ReadMemory;
        DBGKD_WRITE_MEMORY32 WriteMemory;
        DBGKD_READ_MEMORY64 ReadMemory64;
        DBGKD_WRITE_MEMORY64 WriteMemory64;
        DBGKD_GET_CONTEXT GetContext;
        DBGKD_SET_CONTEXT SetContext;
        DBGKD_WRITE_BREAKPOINT32 WriteBreakPoint;
        DBGKD_RESTORE_BREAKPOINT RestoreBreakPoint;
        DBGKD_CONTINUE Continue;
        DBGKD_CONTINUE2 Continue2;
        DBGKD_READ_WRITE_IO32 ReadWriteIo;
        DBGKD_READ_WRITE_IO_EXTENDED32 ReadWriteIoExtended;
        DBGKD_QUERY_SPECIAL_CALLS QuerySpecialCalls;
        DBGKD_SET_SPECIAL_CALL32 SetSpecialCall;
        DBGKD_SET_INTERNAL_BREAKPOINT32 SetInternalBreakpoint;
        DBGKD_GET_INTERNAL_BREAKPOINT32 GetInternalBreakpoint;
        DBGKD_GET_VERSION32 GetVersion32;
        DBGKD_BREAKPOINTEX BreakPointEx;
        DBGKD_READ_WRITE_MSR ReadWriteMsr;
        DBGKD_SEARCH_MEMORY SearchMemory;
        DBGKD_CONTEXT_EX GetContextEx;
        DBGKD_CONTEXT_EX SetContextEx;
    } u;
} ALIGN( 4 ) DBGKD_MANIPULATE_STATE32, *ALIGN_PTR( 4 ) PDBGKD_MANIPULATE_STATE32;

typedef struct ALIGN( 8 ) _DBGKM_EXCEPTION64 {
    EXCEPTION_RECORD64 ExceptionRecord;
    unsigned int FirstChance;
} ALIGN( 8 ) DBGKM_EXCEPTION64, *ALIGN_PTR( 8 ) PDBGKM_EXCEPTION64;


#pragma pack( pop )

//
// non ida shit.
//

#if 0
#define KdApiReadMemory 0x3130
#define KdApiWriteMemory 0x3131
#define KdApiGetContext 0x3132
#define KdApiSetContext 0x3133
#define KdApiWriteBreakPoint 0x3134
#define KdApiRestoreBreakPoint 0x3135
#define KdApiContinue 0x3136
#define KdApiReadControlSpace 0x3137
#define KdApiWriteControlSpace 0x3138
#define KdApiReadIoSpace 0x3139
#define KdApiWriteIoSpace 0x313A
#define KdApiReboot 0x313B
#define KdApiContinueStateChange 0x313C
#define KdApiReadPhysicalMemory 0x313D
#define KdApiWritePhysicalMemory 0x313E
#endif

#if 1
//
// Managed to find these definitions and thank you sir.
//

#define DbgKdMinimumManipulate              0x00003130L

#define DbgKdReadVirtualMemoryApi           0x00003130L
#define DbgKdWriteVirtualMemoryApi          0x00003131L
#define DbgKdGetContextApi                  0x00003132L
#define DbgKdSetContextApi                  0x00003133L
#define DbgKdWriteBreakPointApi             0x00003134L
#define DbgKdRestoreBreakPointApi           0x00003135L
#define DbgKdContinueApi                    0x00003136L
#define DbgKdReadControlSpaceApi            0x00003137L
#define DbgKdWriteControlSpaceApi           0x00003138L
#define DbgKdReadIoSpaceApi                 0x00003139L
#define DbgKdWriteIoSpaceApi                0x0000313AL
#define DbgKdRebootApi                      0x0000313BL
#define DbgKdContinueApi2                   0x0000313CL
#define DbgKdReadPhysicalMemoryApi          0x0000313DL
#define DbgKdWritePhysicalMemoryApi         0x0000313EL
#define DbgKdQuerySpecialCallsApi           0x0000313FL
#define DbgKdSetSpecialCallApi              0x00003140L
#define DbgKdClearSpecialCallsApi           0x00003141L
#define DbgKdSetInternalBreakPointApi       0x00003142L
#define DbgKdGetInternalBreakPointApi       0x00003143L
#define DbgKdReadIoSpaceExtendedApi         0x00003144L
#define DbgKdWriteIoSpaceExtendedApi        0x00003145L
#define DbgKdGetVersionApi                  0x00003146L
#define DbgKdWriteBreakPointExApi           0x00003147L
#define DbgKdRestoreBreakPointExApi         0x00003148L
#define DbgKdCauseBugCheckApi               0x00003149L
#define DbgKdSwitchProcessor                0x00003150L
#define DbgKdPageInApi                      0x00003151L // obsolete
#define DbgKdReadMachineSpecificRegister    0x00003152L
#define DbgKdWriteMachineSpecificRegister   0x00003153L
#define OldVlm1                             0x00003154L
#define OldVlm2                             0x00003155L
#define DbgKdSearchMemoryApi                0x00003156L
#define DbgKdGetBusDataApi                  0x00003157L
#define DbgKdSetBusDataApi                  0x00003158L
#define DbgKdCheckLowMemoryApi              0x00003159L
#define DbgKdClearAllInternalBreakpointsApi 0x0000315AL
#define DbgKdFillMemoryApi                  0x0000315BL
#define DbgKdQueryMemoryApi                 0x0000315CL
#define DbgKdSwitchPartition                0x0000315DL

#define DbgKdGetContextEx                   0x0000315FL
#define DbgKdSetContextEx                   0x00003160L
#define DbgKdWriteCustomBreakpointEx        0x00003161L
#define DbgKdReadPhysicalMemoryLong         0x00003162L

#define DbgKdMaximumManipulate              0x00003163L

//
// There is another one for reading physical memory, with run length encoding
// however, I won't be implementing that and I'm yet to see a debugger call it.
//

#endif

#if 0
typedef enum _KD_API_NUMBER {
    KdApiReadMemory = 0x3130,
    KdApiWriteMemory,
    KdApiGetContext,
    KdApiSetContext,
    KdApiWriteBreakPoint,
    KdApiRestoreBreakPoint,
    KdApiContinue,
    KdApiReadControlSpace,
    KdApiWriteControlSpace,
    KdApiReadIoSpace,
    KdApiWriteIoSpace,
    KdApiReboot,
    KdApiContinueStateChange,
    KdApiReadPhysicalMemory,
    KdApiWritePhysicalMemory,

    KdApiReadIoSpace2 = 0x3144,
    KdApiWriteIoSpace2,
    KdApiGetVersion,
    KdApiWriteBreakPointEx,
    KdApiRestoreBreakPointEx,
    KdApiManualCrash,
    KdApiSwitchProcessor,
    KdApi_Unk0, // always returns STATUS_UNSUCCESSFUL.
    KdApiReadMsr,
    KdApiWriteMsr,
    KdApiSearchMemory,
    KdApiReadBusData,
    KdApiWriteBusData,

    KdApi_Unk_PhysicalRange,

    KdApiFillMemory = 0x315B,
    KdApiQueryMemory,
    KdApiGetContextEx = 0x315F,
    KdApiSetContextEx,
    KdApiWriteCustomBreakPoint,
    KdApiReadPhysicalMemoryRLE,
} KD_API_NUMBER, *PKD_API_NUMBER;

#endif

typedef struct _DBGKD_CONTROL_REPORT {
    ULONG64 Dr6;
    ULONG64 Dr7;
    ULONG   EFlags;
    USHORT  InstructionCount;
    USHORT  ReportFlags;
    UCHAR   InstructionStream[ 16 ];
    USHORT  SegCs;
    USHORT  SegDs;
    USHORT  SegEs;
    USHORT  SegFs;
} DBGKD_CONTROL_REPORT, *PDBGKD_CONTROL_REPORT;

typedef struct _DBGKD_WAIT_STATE_CHANGE {
    ULONG32 ApiNumber;
    unsigned __int16 ProcessorLevel;
    unsigned __int16 Processor;
    ULONG32 ProcessorCount;
    ULONG64 CurrentThread;
    ULONG64 ProgramCounter;

    union {
        DBGKD_LOAD_SYMBOLS64 LoadSymbols;
        DBGKM_EXCEPTION64 Exception;
        char Pad[ 208 ];
        // these is another type in this union for
        // command strings, and maybe more i missed
        // inside KdTrap
    } u;
    DBGKD_CONTROL_REPORT ControlReport;
} DBGKD_WAIT_STATE_CHANGE, *PDBGKD_WAIT_STATE_CHANGE;

C_ASSERT( FIELD_OFFSET( DBGKD_WAIT_STATE_CHANGE, CurrentThread ) == 16 );

#define KD_LEADER_BREAK_IN      0x62626262
#define KD_LEADER_BREAK_IN_BYTE 0x62
#define KD_LEADER_PACKET        0x30303030
#define KD_LEADER_PACKET_BYTE   0x30
#define KD_LEADER_CONTROL       0x69696969
#define KD_LEADER_CONTROL_BYTE  0x69

#define KD_PACKET_ID_RESET      0x80800000

//
// WDBGEXTS.H
//

typedef struct _DBGKD_DEBUG_DATA_HEADER64 {

    //
    // Link to other blocks
    //

    LIST_ENTRY64 List;

    //
    // This is a unique tag to identify the owner of the block.
    // If your component only uses one pool tag, use it for this, too.
    //

    ULONG           OwnerTag;

    //
    // This must be initialized to the size of the data block,
    // including this structure.
    //

    ULONG           Size;

} DBGKD_DEBUG_DATA_HEADER64, *PDBGKD_DEBUG_DATA_HEADER64;

typedef struct _KDDEBUGGER_DATA64 {

    DBGKD_DEBUG_DATA_HEADER64 Header;

    //
    // Base address of kernel image
    //

    ULONG64   KernBase;

    //
    // DbgBreakPointWithStatus is a function which takes an argument
    // and hits a breakpoint.  This field contains the address of the
    // breakpoint instruction.  When the debugger sees a breakpoint
    // at this address, it may retrieve the argument from the first
    // argument register, or on x86 the eax register.
    //

    ULONG64   BreakpointWithStatus;       // address of breakpoint

    //
    // Address of the saved context record during a bugcheck
    //
    // N.B. This is an automatic in KeBugcheckEx's frame, and
    // is only valid after a bugcheck.
    //

    ULONG64   SavedContext;

    //
    // help for walking stacks with user callbacks:
    //

    //
    // The address of the thread structure is provided in the
    // WAIT_STATE_CHANGE packet.  This is the offset from the base of
    // the thread structure to the pointer to the kernel stack frame
    // for the currently active usermode callback.
    //

    USHORT  ThCallbackStack;            // offset in thread data

    //
    // these values are offsets into that frame:
    //

    USHORT  NextCallback;               // saved pointer to next callback frame
    USHORT  FramePointer;               // saved frame pointer

    //
    // pad to a quad boundary
    //
    USHORT  PaeEnabled : 1;

    //
    // Address of the kernel callout routine.
    //

    ULONG64   KiCallUserMode;             // kernel routine

    //
    // Address of the usermode entry point for callbacks.
    //

    ULONG64   KeUserCallbackDispatcher;   // address in ntdll


    //
    // Addresses of various kernel data structures and lists
    // that are of interest to the kernel debugger.
    //

    ULONG64   PsLoadedModuleList;
    ULONG64   PsActiveProcessHead;
    ULONG64   PspCidTable;

    ULONG64   ExpSystemResourcesList;
    ULONG64   ExpPagedPoolDescriptor;
    ULONG64   ExpNumberOfPagedPools;

    ULONG64   KeTimeIncrement;
    ULONG64   KeBugCheckCallbackListHead;
    ULONG64   KiBugcheckData;

    ULONG64   IopErrorLogListHead;

    ULONG64   ObpRootDirectoryObject;
    ULONG64   ObpTypeObjectType;

    ULONG64   MmSystemCacheStart;
    ULONG64   MmSystemCacheEnd;
    ULONG64   MmSystemCacheWs;

    ULONG64   MmPfnDatabase;
    ULONG64   MmSystemPtesStart;
    ULONG64   MmSystemPtesEnd;
    ULONG64   MmSubsectionBase;
    ULONG64   MmNumberOfPagingFiles;

    ULONG64   MmLowestPhysicalPage;
    ULONG64   MmHighestPhysicalPage;
    ULONG64   MmNumberOfPhysicalPages;

    ULONG64   MmMaximumNonPagedPoolInBytes;
    ULONG64   MmNonPagedSystemStart;
    ULONG64   MmNonPagedPoolStart;
    ULONG64   MmNonPagedPoolEnd;

    ULONG64   MmPagedPoolStart;
    ULONG64   MmPagedPoolEnd;
    ULONG64   MmPagedPoolInformation;
    ULONG64   MmPageSize;

    ULONG64   MmSizeOfPagedPoolInBytes;

    ULONG64   MmTotalCommitLimit;
    ULONG64   MmTotalCommittedPages;
    ULONG64   MmSharedCommit;
    ULONG64   MmDriverCommit;
    ULONG64   MmProcessCommit;
    ULONG64   MmPagedPoolCommit;
    ULONG64   MmExtendedCommit;

    ULONG64   MmZeroedPageListHead;
    ULONG64   MmFreePageListHead;
    ULONG64   MmStandbyPageListHead;
    ULONG64   MmModifiedPageListHead;
    ULONG64   MmModifiedNoWritePageListHead;
    ULONG64   MmAvailablePages;
    ULONG64   MmResidentAvailablePages;

    ULONG64   PoolTrackTable;
    ULONG64   NonPagedPoolDescriptor;

    ULONG64   MmHighestUserAddress;
    ULONG64   MmSystemRangeStart;
    ULONG64   MmUserProbeAddress;

    ULONG64   KdPrintCircularBuffer;
    ULONG64   KdPrintCircularBufferEnd;
    ULONG64   KdPrintWritePointer;
    ULONG64   KdPrintRolloverCount;

    ULONG64   MmLoadedUserImageList;

    // NT 5.1 Addition

    ULONG64   NtBuildLab;
    ULONG64   KiNormalSystemCall;

    // NT 5.0 hotfix addition

    ULONG64   KiProcessorBlock;
    ULONG64   MmUnloadedDrivers;
    ULONG64   MmLastUnloadedDriver;
    ULONG64   MmTriageActionTaken;
    ULONG64   MmSpecialPoolTag;
    ULONG64   KernelVerifier;
    ULONG64   MmVerifierData;
    ULONG64   MmAllocatedNonPagedPool;
    ULONG64   MmPeakCommitment;
    ULONG64   MmTotalCommitLimitMaximum;
    ULONG64   CmNtCSDVersion;

    // NT 5.1 Addition

    ULONG64   MmPhysicalMemoryBlock;
    ULONG64   MmSessionBase;
    ULONG64   MmSessionSize;
    ULONG64   MmSystemParentTablePage;

    // Server 2003 addition

    ULONG64   MmVirtualTranslationBase;

    USHORT    OffsetKThreadNextProcessor;
    USHORT    OffsetKThreadTeb;
    USHORT    OffsetKThreadKernelStack;
    USHORT    OffsetKThreadInitialStack;

    USHORT    OffsetKThreadApcProcess;
    USHORT    OffsetKThreadState;
    USHORT    OffsetKThreadBStore;
    USHORT    OffsetKThreadBStoreLimit;

    USHORT    SizeEProcess;
    USHORT    OffsetEprocessPeb;
    USHORT    OffsetEprocessParentCID;
    USHORT    OffsetEprocessDirectoryTableBase;

    USHORT    SizePrcb;
    USHORT    OffsetPrcbDpcRoutine;
    USHORT    OffsetPrcbCurrentThread;
    USHORT    OffsetPrcbMhz;

    USHORT    OffsetPrcbCpuType;
    USHORT    OffsetPrcbVendorString;
    USHORT    OffsetPrcbProcStateContext;
    USHORT    OffsetPrcbNumber;

    USHORT    SizeEThread;

    ULONG64   KdPrintCircularBufferPtr;
    ULONG64   KdPrintBufferSize;

    ULONG64   KeLoaderBlock;

    USHORT    SizePcr;
    USHORT    OffsetPcrSelfPcr;
    USHORT    OffsetPcrCurrentPrcb;
    USHORT    OffsetPcrContainedPrcb;

    USHORT    OffsetPcrInitialBStore;
    USHORT    OffsetPcrBStoreLimit;
    USHORT    OffsetPcrInitialStack;
    USHORT    OffsetPcrStackLimit;

    USHORT    OffsetPrcbPcrPage;
    USHORT    OffsetPrcbProcStateSpecialReg;
    USHORT    GdtR0Code;
    USHORT    GdtR0Data;

    USHORT    GdtR0Pcr;
    USHORT    GdtR3Code;
    USHORT    GdtR3Data;
    USHORT    GdtR3Teb;

    USHORT    GdtLdt;
    USHORT    GdtTss;
    USHORT    Gdt64R3CmCode;
    USHORT    Gdt64R3CmTeb;

    ULONG64   IopNumTriageDumpDataBlocks;
    ULONG64   IopTriageDumpDataBlocks;

    // Longhorn addition

    ULONG64   VfCrashDataBlock;
    ULONG64   MmBadPagesDetected;
    ULONG64   MmZeroedPageSingleBitErrorsDetected;

    // Windows 7 addition

    ULONG64   EtwpDebuggerData;
    USHORT    OffsetPrcbContext;

    // Windows 8 addition

    USHORT    OffsetPrcbMaxBreakpoints;
    USHORT    OffsetPrcbMaxWatchpoints;

    ULONG     OffsetKThreadStackLimit;
    ULONG     OffsetKThreadStackBase;
    ULONG     OffsetKThreadQueueListEntry;
    ULONG     OffsetEThreadIrpList;

    USHORT    OffsetPrcbIdleThread;
    USHORT    OffsetPrcbNormalDpcState;
    USHORT    OffsetPrcbDpcStack;
    USHORT    OffsetPrcbIsrStack;

    USHORT    SizeKDPC_STACK_FRAME;

    // Windows 8.1 Addition

    USHORT    OffsetKPriQueueThreadListHead;
    USHORT    OffsetKThreadWaitReason;

    // Windows 10 RS1 Addition

    USHORT    Padding;
    ULONG64   PteBase;

    // Windows 10 RS5 Addition

    ULONG64 RetpolineStubFunctionTable;
    ULONG RetpolineStubFunctionTableSize;
    ULONG RetpolineStubOffset;
    ULONG RetpolineStubSize;

} KDDEBUGGER_DATA64, *PKDDEBUGGER_DATA64;

C_ASSERT( sizeof( KDDEBUGGER_DATA64 ) == 0x380 );
C_ASSERT( FIELD_OFFSET( KDDEBUGGER_DATA64, KernBase ) == 0x18 );

#pragma pack( push, 2 )
typedef struct _KD_CONTEXT {
    ULONG32                       RetryCount;
    BOOLEAN                       BreakRequested;
} KD_CONTEXT, *PKD_CONTEXT;
#pragma pack( pop )

C_ASSERT( sizeof( KD_CONTEXT ) == 0x6 );

typedef struct _KD_PACKET {
    ULONG32 PacketLeader;
    USHORT  PacketType;
    USHORT  PacketLength;
    ULONG32 PacketId;
    ULONG32 Checksum;
} KD_PACKET, *PKD_PACKET;

C_ASSERT( sizeof( KD_PACKET ) == 0x10 );

CFORCEINLINE
ULONG32
KdMessageChecksum(
    _In_ PSTRING Message
)
{
    ULONG32 Length;
    ULONG32 Checksum;
    PUCHAR  Buffer;

    Checksum = 0;
    Length = Message->Length;
    Buffer = ( PUCHAR )Message->Buffer;

    while ( Length-- ) {

        Checksum += *Buffer++;
    }

    return Checksum;
}

typedef enum _KD_PACKET_TYPE {
    KdTypeStateManipulate = 2,
    KdTypeAcknowledge = 4,
    KdTypeResend = 5,
    KdTypeReset = 6,
    KdTypeStateChange = 7,
    KdTypePollBreakin = 8,
    KdTypeControlRequest = 10,
    KdTypeFileIo = 11
} KD_PACKET_TYPE, *PKD_PACKET_TYPE;
